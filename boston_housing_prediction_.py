# -*- coding: utf-8 -*-
"""Boston_Housing_Prediction .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12eVZ5dzrwFcwzVD_PqsLq4JjdARq6NtF
"""

#Import Dependencies
import pandas as pd       #importing pandas  librariry file
import numpy as np       #impotrting numpy librariry file
from sklearn import linear_model         #including linear_model dataset
from sklearn.model_selection import train_test_split     #including training and testing of data values

#Load the boston housing data set from sklearn.dataset and print it
# from sklearn.datasets import load_boston
from sklearn.datasets import load_boston
# from sklearn.datasets import load_boston
boston=load_boston() #It gives dictionary like objects
print(boston)

#Transform the dataset into dataframes
#data = data we want or the independent variables also known as the x values
#features_names=the column name of the data
#target=the target variables or the price of houses or dependent variables also known as y values


df_x=pd.DataFrame(boston.data, columns=boston.feature_names)        #storing data of feature names of boston file
df_y=pd.DataFrame(boston.target)                                  #storing data of target values in boston file
print(df_x)

#Get some statistic from the dataset count, mean etc
df_x.describe()                       #getting stats data from df_x

#Initialize the linear regression model
reg=linear_model.LinearRegression()                #storing linear regression dataset in variable reg

#Split the 67% training and 33% testing data
x_train, x_test, y_train, y_test=train_test_split(df_x, df_y, test_size=0.33, random_state=0)     #giving 33% vlaues for testing proving randomness

#train the model with training data
reg.fit(x_train, y_train)                #gives the updated values of weights and bias.

#Print the coefficient/weights for each features/columns of our model
print(reg.coef_)                              #printing the variable reg.coef_

#print the prediction on our test data

y_pred=reg.predict(x_test)              #storing predicted xtest values in variable y_pred
print(y_pred)                                #printing data in variable

print(y_test)

#Check the model performance / accuracy using Mean Squared Error(MSE)
print(np.mean(y_pred-y_test)**2)              #checking the accuracy by mean square error

#Check the model performance / accuracy using Mean squared Error(MSE)
from sklearn.metrics import mean_squared_error
print(mean_squared_error(y_test, y_pred))                          #printing mean squared error at point(y_test, y_pred)