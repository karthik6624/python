# -*- coding: utf-8 -*-
"""HeartDiseasePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sqqtRVm-WneNaUBkBj8roR00PRjNif1a
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df= pd.read_csv('heart_disease')
df.head()

df.shape

df.dtypes

df.describe()

df.isnull().any()

categorical=[]
def filter_cat(cat):
    for i in cat:
        if df[i].nunique() < 20:            
            categorical.append(i)

filter_cat(df.columns)
categorical

df.head()

# check relation between age and max heart rate achieved among all those tested positive or negative
sns.scatterplot(x="Age", y="Thal", data=df,  hue="Sex")
plt.legend(["heart disease","no heart disease"])
plt.title("Heart disease or not among people having higher max heart rate at their resp. ages")
plt.xlabel("Age")
plt.ylabel("Max heart rate")

# heart disease found in patients of different sex
sns.countplot(x="Sex", data=df, hue="Sex")
plt.legend(["no heart disease","heart disease"])
plt.title("Heart disease among patients of different sex")

sns.relplot(kind="scatter", x="Age", y="Chol", data=df, hue="Sex")
plt.title("Cholestrol varying with age and sex")
plt.xlabel("Age")
plt.ylabel("Cholestrol")
plt.show()

sns.relplot(kind="scatter", x="Age", y="Thal", data=df, hue="Fbs")
plt.ylabel("Max heart rate")
plt.xlabel("Age")
plt.title("Are people with high max heart rate having high blood sugar at their resp. ages")

corr_mat=df.corr()
plt.figure(figsize=(20,20))
sns.heatmap(corr_mat,annot=True, cmap='RdYlGn')

corr_mat

corr_features=[] 
mat= corr_mat.iloc[:-1]["Age"]
for index,i in enumerate(mat):
    if i >= 0.4 or i <= -0.4:
        corr_features.append(mat.index[index])
corr_features

features=df.drop("Age", axis=1)
target=df["Age"]

from sklearn.model_selection import train_test_split 
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=0)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score

accuracy_score

